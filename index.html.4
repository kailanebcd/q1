<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Dynamic FIRE Risk & Speed Simulator</title>
<style>
  body {
    font-family: Arial, sans-serif;
    margin: 20px;
    max-width: 720px;
  }
  label {
    display: block;
    margin-top: 12px;
    font-weight: bold;
  }
  input[type="number"], input[type="text"] {
    width: 100%;
    padding: 6px 8px;
    font-size: 1rem;
    box-sizing: border-box;
    margin-top: 4px;
  }
  button {
    margin-top: 16px;
    padding: 10px 18px;
    font-size: 1.1rem;
    cursor: pointer;
  }
  button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  #runStatus {
    margin-left: 10px;
    font-size: 1rem;
    color: #007700;
  }
  #resultArea {
    margin-top: 24px;
    background: #f4f4f4;
    padding: 16px;
    border-radius: 6px;
    white-space: pre-wrap;
    font-family: monospace;
  }
</style>
</head>
<body>

<h1>Dynamic FIRE Risk & Speed Simulator</h1>

<form id="simForm">
  <label for="years">Simulation Horizon (years):</label>
  <input type="number" id="years" min="1" max="100" value="40" required />

  <label for="saveRate">Savings Rate (0 to 1):</label>
  <input type="number" id="saveRate" min="0" max="1" step="0.01" value="0.5" required />

  <label>Contribution Splits (must sum to ~1):</label>
  <input type="number" id="splitPre" min="0" max="1" step="0.01" value="0.33" required placeholder="Pre-tax (e.g. 0.33)" />
  <input type="number" id="splitRoth" min="0" max="1" step="0.01" value="0.33" required placeholder="Roth (e.g. 0.33)" />
  <input type="number" id="splitTax" min="0" max="1" step="0.01" value="0.34" required placeholder="Taxable (e.g. 0.34)" />

  <label for="incomeShockProb">Career Income Shock Probability (0 to 1):</label>
  <input type="number" id="incomeShockProb" min="0" max="1" step="0.01" value="0.05" required />

  <label for="incomeShockImpact">Income Shock Impact (fraction lost):</label>
  <input type="number" id="incomeShockImpact" min="0" max="1" step="0.01" value="0.3" required />

  <label for="trials">Number of Monte Carlo Trials:</label>
  <input type="number" id="trials" min="1" max="10000" value="1000" required />

  <button id="runBtn" type="submit">â–¶ Run Simulation</button>
  <span id="runStatus" style="display:none;">Running...</span>
</form>

<div id="resultArea" aria-live="polite"></div>

<script>
// --- Worker script as a string ---
const workerScript = `
self.addEventListener('message', e => {
  const data = e.data;
  if (data.cmd === 'start') {
    const {
      years, saveRate, splitPre, splitRoth, splitTax,
      incomeShockProb, incomeShockImpact, trials
    } = data.params;

    // Simple model: start with $0, each year add savings * random market return
    // Market returns: normal dist approx with mean=7%, std=15%
    // Income shocks reduce savings that year

    function normalRandom() {
      // Box-Muller transform
      let u = 0, v = 0;
      while(u === 0) u = Math.random();
      while(v === 0) v = Math.random();
      return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
    }

    const results = [];
    for (let t=0; t < trials; t++) {
      let balance = 0;
      let income = 1; // normalized base income
      for (let year=0; year < years; year++) {
        // Check income shock
        if (Math.random() < incomeShockProb) {
          income *= (1 - incomeShockImpact);
        }
        // Market return random ~N(7%,15%)
        const marketReturn = 0.07 + 0.15 * normalRandom();
        // Savings this year
        const savings = income * saveRate;
        // Contributions split into buckets (we don't model taxes etc here, just track)
        const contribPre = savings * splitPre;
        const contribRoth = savings * splitRoth;
        const contribTax = savings * splitTax;
        // Growth: balance grows by marketReturn plus new savings
        balance = balance * (1 + marketReturn) + savings;

        // Early sanity check balance non-negative
        if (balance < 0) balance = 0;
      }
      results.push(balance);

      // Post progress every 5%
      if (t % Math.max(1, Math.floor(trials/20)) === 0) {
        self.postMessage({type:'progress', percent: (t/trials)*100, message: \`Trial \${t} / \${trials}\`});
      }
    }

    // Compute stats
    results.sort((a,b) => a - b);
    const p10 = results[Math.floor(trials*0.10)];
    const p50 = results[Math.floor(trials*0.50)];
    const p90 = results[Math.floor(trials*0.90)];
    const mean = results.reduce((a,b)=>a+b,0)/trials;

    self.postMessage({
      type: 'result',
      stats: { p10, p50, p90, mean, trials, years }
    });
  }
});
`;

// Create blob URL for the worker
const blob = new Blob([workerScript], {type: 'application/javascript'});
const workerUrl = URL.createObjectURL(blob);
const worker = new Worker(workerUrl);

const runBtn = document.getElementById('runBtn');
const runStatus = document.getElementById('runStatus');
const resultArea = document.getElementById('resultArea');

function validateInputs() {
  const years = +document.getElementById('years').value;
  if (isNaN(years) || years < 1) throw new Error("Simulation Horizon (years) must be at least 1.");

  const saveRate = +document.getElementById('saveRate').value;
  if (isNaN(saveRate) || saveRate < 0 || saveRate > 1) throw new Error("Savings Rate must be between 0 and 1.");

  const splitPre = +document.getElementById('splitPre').value;
  const splitRoth = +document.getElementById('splitRoth').value;
  const splitTax = +document.getElementById('splitTax').value;
  const sumSplits = splitPre + splitRoth + splitTax;
  if (Math.abs(sumSplits - 1) > 0.05) throw new Error("Contribution splits must sum to approximately 1.");

  const incomeShockProb = +document.getElementById('incomeShockProb').value;
  if (isNaN(incomeShockProb) || incomeShockProb < 0 || incomeShockProb > 1)
    throw new Error("Income Shock Probability must be between 0 and 1.");

  const incomeShockImpact = +document.getElementById('incomeShockImpact').value;
  if (isNaN(incomeShockImpact) || incomeShockImpact < 0 || incomeShockImpact > 1)
    throw new Error("Income Shock Impact must be between 0 and 1.");

  const trials = +document.getElementById('trials').value;
  if (isNaN(trials) || trials < 1 || trials > 10000)
    throw new Error("Number of Trials must be between 1 and 10,000.");

  return { years, saveRate, splitPre, splitRoth, splitTax, incomeShockProb, incomeShockImpact, trials };
}

function formatCurrency(num) {
  return '$' + num.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function updateUIWithResults(stats) {
  const { p10, p50, p90, mean, trials, years } = stats;
  resultArea.textContent = `
Simulated ${trials} trials over ${years} years.

Estimated Portfolio Balance (end of horizon):

  10th Percentile (worst case): ${formatCurrency(p10)}
  Median (50th percentile):        ${formatCurrency(p50)}
  90th Percentile (best case):    ${formatCurrency(p90)}
  Mean (average):                 ${formatCurrency(mean)}

Note: Model uses simplified assumptions with random market returns and income shocks.
  `.trim();
}

function runSimulation() {
  let params;
  try {
    params = validateInputs();
  } catch (e) {
    alert("Input error: " + e.message);
    return;
  }

  runBtn.disabled = true;
  runStatus.style.display = 'inline';
  runStatus.textContent = 'Starting simulation...';
  resultArea.textContent = '';

  worker.postMessage({ cmd: 'start', params });

  console.log("Simulation started with params:", params);
}

worker.onmessage = function(e) {
  const data = e.data;
  if (data.type === 'progress') {
    runStatus.textContent = `Running... ${Math.round(data.percent)}% (${data.message})`;
    // console.log("Progress:", data.percent, data.message);
  } else if (data.type === 'result') {
    runStatus.style.display = 'none';
    runBtn.disabled = false;
    updateUIWithResults(data.stats);
    console.log("Simulation completed:", data.stats);
  }
};

worker.onerror = function(e) {
  alert("Simulation worker error: " + e.message);
  console.error("Worker error:", e);
  runStatus.style.display = 'none';
  runBtn.disabled = false;
};

document.getElementById('simForm').addEventListener('submit', e => {
  e.preventDefault();
  runSimulation();
});
</script>

</body>
</html>
